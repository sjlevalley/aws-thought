{"version":3,"sources":["components/Header/index.js","components/Footer/index.js","components/ThoughtList/index.js","components/ThoughtForm/index.js","pages/Home.js","pages/NoMatch.js","pages/Profile.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","to","style","fontWeight","Footer","ThoughtList","thoughts","title","length","map","thought","key","createdAt","username","Date","parseInt","toString","image","src","alt","ThoughtForm","useState","formState","setFormState","characterCount","setCharacterCount","fileInput","useRef","handleChange","event","target","value","name","onSubmit","preventDefault","a","fetch","method","headers","Accept","body","JSON","stringify","res","json","data","console","log","postData","placeholder","onChange","type","ref","onClick","FormData","append","current","files","mode","ok","Error","statusText","postResponse","Location","postImage","Home","isLoaded","setIsLoaded","setThoughts","useEffect","jsonData","sort","b","fetchData","NoMatch","Profile","props","userParam","useParams","App","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2e46b939.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header className=\"bg-secondary mb-4 py-2 flex-row align-center\">\r\n      <div className=\"container flex-row justify-space-between-lg justify-center align-center\">\r\n        <Link\r\n          to={`/`}\r\n          style={{ fontWeight: 700 }}\r\n          className=\"text-light\"\r\n        >\r\n          <h1>Deep Thoughts</h1>\r\n        </Link>{' '}\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer className=\"w-100 mt-auto bg-secondary p-4\">\r\n      <div className=\"container\">&copy;2020 by Lernantino</div>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n// Renders the list of thoughts\r\nconst ThoughtList = ({ thoughts, title }) => {\r\n  if (!thoughts.length) {\r\n    return <h3>No Thoughts Yet</h3>;\r\n  }\r\n  return (\r\n    <div>\r\n      <h3>{title}</h3>\r\n      {thoughts &&\r\n        thoughts.map((thought) => (\r\n          <div key={thought.createdAt} className=\"card mb-3\">\r\n            <p className=\"card-header\">\r\n              <Link\r\n                to={`/profile/${thought.username}`}\r\n                style={{ fontWeight: 700 }}\r\n                className=\"text-light\"\r\n              >\r\n                {thought.username}'s thought on {new Date(parseInt(thought.createdAt)).toString()}\r\n              </Link>{' '}\r\n            </p>\r\n            {thought.thought &&\r\n              <p className=\"px-2 mt-2\">\r\n                {thought.thought}\r\n              </p>\r\n            }\r\n            {/* add the thought image */}\r\n            {thought.image &&\r\n              <p className=\"px-2\">\r\n                <img\r\n                  className=\"mt-3 ml-4 thought-image\"\r\n                  src={thought.image} alt=\"S3 bucket response\"\r\n                />\r\n              </p>\r\n            }\r\n\r\n          </div>\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ThoughtList;\r\n","import React, { useState, useRef } from \"react\";\r\n\r\n\r\nconst ThoughtForm = () => {\r\n  const [formState, setFormState] = useState({\r\n    username: \"\",\r\n    thought: \"\",\r\n  });\r\n  const [characterCount, setCharacterCount] = useState(0);\r\n\r\n  const fileInput = useRef(null);\r\n\r\n  const handleImageUpload = event => {\r\n    event.preventDefault();\r\n    const data = new FormData();\r\n    data.append('image', fileInput.current.files[0]);\r\n\r\n    const postImage = async () => {\r\n      try {\r\n        const res = await fetch('/api/image-upload', {\r\n          mode: 'cors',\r\n          method: 'POST',\r\n          body: data\r\n        })\r\n        if (!res.ok) throw new Error(res.statusText);\r\n        const postResponse = await res.json();\r\n        setFormState({ ...formState, image: postResponse.Location })\r\n        console.log(\"postImage: \", postResponse.Location)\r\n        return postResponse.Location;\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n    postImage();\r\n  };\r\n\r\n\r\n\r\n  // update state based on form input changes\r\n  const handleChange = (event) => {\r\n    if (event.target.value.length <= 280) {\r\n      setFormState({ ...formState, [event.target.name]: event.target.value });\r\n      setCharacterCount(event.target.value.length);\r\n    }\r\n  };\r\n\r\n  // submit form\r\n  const handleFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    const postData = async () => {\r\n      const res = await fetch('/api/users', {\r\n        method: 'POST',\r\n        headers: {\r\n          Accept: 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(formState)\r\n      })\r\n      const data = await res.json();\r\n      console.log(data);\r\n    }\r\n    postData();\r\n\r\n    // clear form value\r\n    setFormState({ username: \"\", thought: \"\" });\r\n    setCharacterCount(0);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <p className={`m-0 ${characterCount === 280 ? \"text-error\" : \"\"}`}>\r\n        Character Count: {characterCount}/280\r\n      </p>\r\n      <form\r\n        className=\"flex-row justify-center justify-space-between-md align-stretch\"\r\n        onSubmit={handleFormSubmit}\r\n      >\r\n        <input\r\n          placeholder=\"Name\"\r\n          name=\"username\"\r\n          value={formState.username}\r\n          className=\"form-input col-12 \"\r\n          onChange={handleChange}\r\n        ></input>\r\n        <textarea\r\n          placeholder=\"Here's a new thought...\"\r\n          name=\"thought\"\r\n          value={formState.thought}\r\n          className=\"form-input col-12 \"\r\n          onChange={handleChange}\r\n        ></textarea>\r\n        <label className=\"form-input col-12  p-1\">\r\n          Add an image to your thought:\r\n        <input\r\n            type=\"file\"\r\n            ref={fileInput}\r\n            className=\"form-input p-2\"\r\n          />\r\n          <button\r\n            className=\"btn\"\r\n            onClick={handleImageUpload}\r\n            type=\"submit\"\r\n          >\r\n            Upload\r\n        </button>\r\n        </label>\r\n        <button className=\"btn col-12 \" type=\"submit\">\r\n          Submit\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ThoughtForm;\r\n","import React, { useState, useEffect } from 'react';\r\nimport ThoughtList from '../components/ThoughtList';\r\nimport ThoughtForm from '../components/ThoughtForm';\r\n\r\nconst Home = () => {\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [thoughts, setThoughts] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const res = await fetch('/api/users');\r\n        const jsonData = await res.json();\r\n        // sort the array by createdAt property ordered by descending values\r\n        const data = jsonData.sort((a, b) => (a.createdAt < b.createdAt) ? 1 : -1);\r\n        setThoughts([...data]);\r\n        setIsLoaded(true);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <main>\r\n      <div className=\"flex-row justify-space-between\">\r\n        <div className=\"col-12 mb-3\">\r\n          <ThoughtForm />\r\n        </div>\r\n        <div className={`col-12 mb-3 `}>\r\n          {!isLoaded ? (\r\n            <div>Loading...</div>\r\n          ) : (\r\n            <ThoughtList thoughts={thoughts} setThoughts={setThoughts} title=\"Some Feed for Thought(s)...\" />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\r\n\r\nconst NoMatch = () => {\r\n  return (\r\n    <div>\r\n      Oops, we couldn't find that page.\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoMatch;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport ThoughtList from '../components/ThoughtList';\r\n\r\nconst Profile = props => {\r\n  const { username: userParam } = useParams();\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [thoughts, setThoughts] = useState([{\r\n    username: userParam,\r\n    createdAt: '',\r\n    thought: '',\r\n  }]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const res = await fetch(`/api/users/${userParam}`);\r\n        const data = await res.json();\r\n        console.log(data);\r\n        setThoughts([...data]);\r\n        setIsLoaded(true);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [userParam]);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"flex-row mb-3\">\r\n        <h2 className=\"bg-dark text-secondary p-3 display-inline-block\">\r\n          Viewing {userParam ? `${userParam}'s` : 'your'} profile.\r\n        </h2>\r\n      </div>\r\n\r\n      <div className=\"flex-row justify-space-between mb-3\">\r\n        <div className=\"col-12 mb-3 col-lg-9\">\r\n          {!isLoaded ? (\r\n            <div>Loading...</div>\r\n          ) : (\r\n            <ThoughtList thoughts={thoughts} title={`${userParam}'s thoughts...`} />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport Header from './components/Header';\r\nimport Footer from './components/Footer';\r\nimport Home from './pages/Home';\r\nimport NoMatch from './pages/NoMatch';\r\nimport Profile from './pages/Profile';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n    <div className=\"flex-column justify-flex-start min-100-vh\">\r\n      <Header />\r\n      <div className=\"container\">\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route exact path=\"/profile/:username\" component={Profile} />\r\n          <Route component={NoMatch} />\r\n        </Switch>\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}